name: build

on:
  pull_request:
    paths-ignore:
      - '**.md'
      - '*.txt'
      - '.gitignore'
      - 'docs/*'
  push:
    branches:
      - master
    paths-ignore:
      - '**.md'
      - '*.txt'
      - '.gitignore'
      - 'docs/*'
  release:
    types: [published]

  workflow_dispatch:

jobs:
  windows:
    name: Release Windows ${{ matrix.arch }}
    runs-on: windows-2022
    strategy:
      fail-fast: false
      matrix:
        arch: [x86_64]
        include:
          - arch: x86_64
            msystem: mingw64
            prefix: mingw-w64-x86_64

    defaults:
      run:
        shell: msys2 {0}

    steps:

    - uses: msys2/setup-msys2@v2
      with:
        install: base-devel ${{ matrix.prefix }}-binutils ${{ matrix.prefix }}-make ${{ matrix.prefix }}-gcc
        msystem: ${{ matrix.msystem }}
        path-type: minimal
        release: false
        update: false

    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Build
      run: |
        make clean ARCH=${{ matrix.arch }}
        make install -j$(nproc) ARCH=${{ matrix.arch }} DESTDIR=bin RENDERER_DEFAULT=opengl
        make clean ARCH=${{ matrix.arch }}
        make install -j$(nproc) ARCH=${{ matrix.arch }} DESTDIR=bin RENDERER_DEFAULT=vulkan

    - uses: actions/upload-artifact@v4
      with:
        name: release-mingw64-${{ matrix.arch }}
        path: bin
        if-no-files-found: error
        retention-days: 5
        
  ubuntu:
    name: Release Unix ${{ matrix.arch }}
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        arch: [x86_64]

    steps:

    - name: Install tools
      run: |
        sudo apt-get -qq update
        sudo apt-get -y install libcurl4-openssl-dev mesa-common-dev libxxf86dga-dev libxrandr-dev libxxf86vm-dev libasound-dev libsdl2-dev libjpeg-dev

    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Build
      run: |
        make install -j$(nproc) ARCH=${{ matrix.arch }} DESTDIR=bin RENDERER_DEFAULT=opengl
        make clean ARCH=${{ matrix.arch }} 
        make install -j$(nproc) ARCH=${{ matrix.arch }} DESTDIR=bin RENDERER_DEFAULT=vulkan

    - uses: actions/upload-artifact@v4
      with:
        name: release-linux-${{ matrix.arch }}
        path: bin
        if-no-files-found: error
        retention-days: 5

  ubuntu-arm:
    name: Release Unix ${{ matrix.arch }}
    runs-on: ubuntu-22.04-arm
    strategy:
      fail-fast: false
      matrix:
        arch: [arm64]

    steps:

    - name: Install tools
      run: |
        sudo apt-get -qq update
        sudo apt-get install -y make gcc g++
        sudo apt-get -y install libcurl4-openssl-dev mesa-common-dev libxxf86dga-dev libxrandr-dev libxxf86vm-dev libasound-dev libsdl2-dev

    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Build
      run: |
        make install -j$(nproc) ARCH=${{ matrix.arch }} DESTDIR=bin RENDERER_DEFAULT=opengl
        make clean ARCH=${{ matrix.arch }}
        make install -j$(nproc) ARCH=${{ matrix.arch }} DESTDIR=bin RENDERER_DEFAULT=vulkan

    - uses: actions/upload-artifact@v4
      with:
        name: release-linux-${{ matrix.arch }}
        path: bin
        if-no-files-found: error
        retention-days: 5

  macos:
    name: Release macOS universal2
    runs-on: macos-14
    strategy:
      fail-fast: false

    steps:

    - name: Install tools
      run: brew install coreutils sdl2 # pkg-config

    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Build
      run: |
        make install -j$(sysctl -n hw.logicalcpu) ARCH=x86_64 DESTDIR=bin INSTALL=ginstall STRIP=echo
        make install -j$(sysctl -n hw.logicalcpu) ARCH=arm64 DESTDIR=bin INSTALL=ginstall STRIP=echo
        ./make-macosx-app.sh release
        hdiutil create -format UDZO -srcfolder build/release-darwin-universal2/OmegA.app build/omega-engine-macos-universal2.dmg

    - uses: actions/upload-artifact@v4
      with:
        name: release-darwin-universal2
        path: build/omega-engine-macos-universal2.dmg
        if-no-files-found: error
        retention-days: 5

  create-testing:
    if: github.ref == 'refs/heads/master' && github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    needs: [windows, ubuntu, ubuntu-arm, macos]
    runs-on: ubuntu-24.04
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v4

      - name: Create binary archives
        run: |
          chmod -R +x *
          7z a -r omega-engine-linux-x86_64.zip      ./release-linux-x86_64
          7z a -r omega-engine-linux-arm64.zip       ./release-linux-arm64
          7z a -r omega-engine-windows-x86_64.zip    ./release-mingw64-x86_64
          cp ./release-darwin-universal2/omega-engine-macos-universal2.dmg .
      - name: Create latest build
        uses: czietz/action-automatic-releases@latest
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          automatic_release_tag: "development"
          prerelease: true
          title: Development Build
          files: |
            *.zip
            *.dmg